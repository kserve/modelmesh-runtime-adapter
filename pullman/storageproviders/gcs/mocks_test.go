// Copyright 2021 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package mock_gcsprovider is a generated GoMock package.
package gcsprovider

import (
	context "context"
	reflect "reflect"

	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	pullman "github.com/kserve/modelmesh-runtime-adapter/pullman"
)

// MockgcsDownloaderFactory is a mock of gcsDownloaderFactory interface.
type MockgcsDownloaderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockgcsDownloaderFactoryMockRecorder
}

// MockgcsDownloaderFactoryMockRecorder is the mock recorder for MockgcsDownloaderFactory.
type MockgcsDownloaderFactoryMockRecorder struct {
	mock *MockgcsDownloaderFactory
}

// NewMockgcsDownloaderFactory creates a new mock instance.
func NewMockgcsDownloaderFactory(ctrl *gomock.Controller) *MockgcsDownloaderFactory {
	mock := &MockgcsDownloaderFactory{ctrl: ctrl}
	mock.recorder = &MockgcsDownloaderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgcsDownloaderFactory) EXPECT() *MockgcsDownloaderFactoryMockRecorder {
	return m.recorder
}

// newDownloader mocks base method.
func (m *MockgcsDownloaderFactory) newDownloader(log logr.Logger, credentials map[string]string) (gcsDownloader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newDownloader", log, credentials)
	ret0, _ := ret[0].(gcsDownloader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// newDownloader indicates an expected call of newDownloader.
func (mr *MockgcsDownloaderFactoryMockRecorder) newDownloader(log, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newDownloader", reflect.TypeOf((*MockgcsDownloaderFactory)(nil).newDownloader), log, credentials)
}

// MockgcsDownloader is a mock of gcsDownloader interface.
type MockgcsDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockgcsDownloaderMockRecorder
}

// MockgcsDownloaderMockRecorder is the mock recorder for MockgcsDownloader.
type MockgcsDownloaderMockRecorder struct {
	mock *MockgcsDownloader
}

// NewMockgcsDownloader creates a new mock instance.
func NewMockgcsDownloader(ctrl *gomock.Controller) *MockgcsDownloader {
	mock := &MockgcsDownloader{ctrl: ctrl}
	mock.recorder = &MockgcsDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgcsDownloader) EXPECT() *MockgcsDownloaderMockRecorder {
	return m.recorder
}

// downloadBatch mocks base method.
func (m *MockgcsDownloader) downloadBatch(ctx context.Context, bucket string, targets []pullman.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "downloadBatch", ctx, bucket, targets)
	ret0, _ := ret[0].(error)
	return ret0
}

// downloadBatch indicates an expected call of downloadBatch.
func (mr *MockgcsDownloaderMockRecorder) downloadBatch(ctx, bucket, targets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "downloadBatch", reflect.TypeOf((*MockgcsDownloader)(nil).downloadBatch), ctx, bucket, targets)
}

// listObjects mocks base method.
func (m *MockgcsDownloader) listObjects(ctx context.Context, bucket, prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listObjects", ctx, bucket, prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listObjects indicates an expected call of listObjects.
func (mr *MockgcsDownloaderMockRecorder) listObjects(ctx, bucket, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listObjects", reflect.TypeOf((*MockgcsDownloader)(nil).listObjects), ctx, bucket, prefix)
}
