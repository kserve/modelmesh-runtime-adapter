// Copyright 2022 IBM Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: provider.go

// Package mock_azureprovider is a generated GoMock package.
package azureprovider

import (
	context "context"
	reflect "reflect"

	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	pullman "github.com/kserve/modelmesh-runtime-adapter/pullman"
)

// MockazureDownloaderFactory is a mock of azureDownloaderFactory interface.
type MockazureDownloaderFactory struct {
	ctrl     *gomock.Controller
	recorder *MockazureDownloaderFactoryMockRecorder
}

// MockazureDownloaderFactoryMockRecorder is the mock recorder for MockazureDownloaderFactory.
type MockazureDownloaderFactoryMockRecorder struct {
	mock *MockazureDownloaderFactory
}

// NewMockazureDownloaderFactory creates a new mock instance.
func NewMockazureDownloaderFactory(ctrl *gomock.Controller) *MockazureDownloaderFactory {
	mock := &MockazureDownloaderFactory{ctrl: ctrl}
	mock.recorder = &MockazureDownloaderFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockazureDownloaderFactory) EXPECT() *MockazureDownloaderFactoryMockRecorder {
	return m.recorder
}

// newDownloaderWithConnectionString mocks base method.
func (m *MockazureDownloaderFactory) newDownloaderWithConnectionString(log logr.Logger, containerName, connectionString string) (azureDownloader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newDownloaderWithConnectionString", log, containerName, connectionString)
	ret0, _ := ret[0].(azureDownloader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// newDownloaderWithConnectionString indicates an expected call of newDownloaderWithConnectionString.
func (mr *MockazureDownloaderFactoryMockRecorder) newDownloaderWithConnectionString(log, containerName, connectionString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newDownloaderWithConnectionString", reflect.TypeOf((*MockazureDownloaderFactory)(nil).newDownloaderWithConnectionString), log, containerName, connectionString)
}

// newDownloaderWithNoCredential mocks base method.
func (m *MockazureDownloaderFactory) newDownloaderWithNoCredential(log logr.Logger, containerUrl string) (azureDownloader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newDownloaderWithNoCredential", log, containerUrl)
	ret0, _ := ret[0].(azureDownloader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// newDownloaderWithNoCredential indicates an expected call of newDownloaderWithNoCredential.
func (mr *MockazureDownloaderFactoryMockRecorder) newDownloaderWithNoCredential(log, containerUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newDownloaderWithNoCredential", reflect.TypeOf((*MockazureDownloaderFactory)(nil).newDownloaderWithNoCredential), log, containerUrl)
}

// newDownloaderWithServicePrincipal mocks base method.
func (m *MockazureDownloaderFactory) newDownloaderWithServicePrincipal(log logr.Logger, containerUrl string, credentials servicePrincipalCredentials) (azureDownloader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "newDownloaderWithServicePrincipal", log, containerUrl, credentials)
	ret0, _ := ret[0].(azureDownloader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// newDownloaderWithServicePrincipal indicates an expected call of newDownloaderWithServicePrincipal.
func (mr *MockazureDownloaderFactoryMockRecorder) newDownloaderWithServicePrincipal(log, containerUrl, credentials interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "newDownloaderWithServicePrincipal", reflect.TypeOf((*MockazureDownloaderFactory)(nil).newDownloaderWithServicePrincipal), log, containerUrl, credentials)
}

// MockazureDownloader is a mock of azureDownloader interface.
type MockazureDownloader struct {
	ctrl     *gomock.Controller
	recorder *MockazureDownloaderMockRecorder
}

// MockazureDownloaderMockRecorder is the mock recorder for MockazureDownloader.
type MockazureDownloaderMockRecorder struct {
	mock *MockazureDownloader
}

// NewMockazureDownloader creates a new mock instance.
func NewMockazureDownloader(ctrl *gomock.Controller) *MockazureDownloader {
	mock := &MockazureDownloader{ctrl: ctrl}
	mock.recorder = &MockazureDownloaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockazureDownloader) EXPECT() *MockazureDownloaderMockRecorder {
	return m.recorder
}

// downloadBatch mocks base method.
func (m *MockazureDownloader) downloadBatch(ctx context.Context, targets []pullman.Target) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "downloadBatch", ctx, targets)
	ret0, _ := ret[0].(error)
	return ret0
}

// downloadBatch indicates an expected call of downloadBatch.
func (mr *MockazureDownloaderMockRecorder) downloadBatch(ctx, targets interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "downloadBatch", reflect.TypeOf((*MockazureDownloader)(nil).downloadBatch), ctx, targets)
}

// listObjects mocks base method.
func (m *MockazureDownloader) listObjects(ctx context.Context, prefix string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "listObjects", ctx, prefix)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// listObjects indicates an expected call of listObjects.
func (mr *MockazureDownloaderMockRecorder) listObjects(ctx, prefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "listObjects", reflect.TypeOf((*MockazureDownloader)(nil).listObjects), ctx, prefix)
}
