// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/proto/mlserver/dataplane/dataplane_grpc.pb.go

// Package mock_mlserver is a generated GoMock package.
package mock_mlserver

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dataplane "github.com/kserve/modelmesh-runtime-adapter/internal/proto/mlserver/dataplane"
	grpc "google.golang.org/grpc"
)

// MockGRPCInferenceServiceClient is a mock of GRPCInferenceServiceClient interface.
type MockGRPCInferenceServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCInferenceServiceClientMockRecorder
}

// MockGRPCInferenceServiceClientMockRecorder is the mock recorder for MockGRPCInferenceServiceClient.
type MockGRPCInferenceServiceClientMockRecorder struct {
	mock *MockGRPCInferenceServiceClient
}

// NewMockGRPCInferenceServiceClient creates a new mock instance.
func NewMockGRPCInferenceServiceClient(ctrl *gomock.Controller) *MockGRPCInferenceServiceClient {
	mock := &MockGRPCInferenceServiceClient{ctrl: ctrl}
	mock.recorder = &MockGRPCInferenceServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCInferenceServiceClient) EXPECT() *MockGRPCInferenceServiceClientMockRecorder {
	return m.recorder
}

// ModelInfer mocks base method.
func (m *MockGRPCInferenceServiceClient) ModelInfer(ctx context.Context, in *dataplane.ModelInferRequest, opts ...grpc.CallOption) (*dataplane.ModelInferResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelInfer", varargs...)
	ret0, _ := ret[0].(*dataplane.ModelInferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelInfer indicates an expected call of ModelInfer.
func (mr *MockGRPCInferenceServiceClientMockRecorder) ModelInfer(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfer", reflect.TypeOf((*MockGRPCInferenceServiceClient)(nil).ModelInfer), varargs...)
}

// ModelMetadata mocks base method.
func (m *MockGRPCInferenceServiceClient) ModelMetadata(ctx context.Context, in *dataplane.ModelMetadataRequest, opts ...grpc.CallOption) (*dataplane.ModelMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelMetadata", varargs...)
	ret0, _ := ret[0].(*dataplane.ModelMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelMetadata indicates an expected call of ModelMetadata.
func (mr *MockGRPCInferenceServiceClientMockRecorder) ModelMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMetadata", reflect.TypeOf((*MockGRPCInferenceServiceClient)(nil).ModelMetadata), varargs...)
}

// ModelReady mocks base method.
func (m *MockGRPCInferenceServiceClient) ModelReady(ctx context.Context, in *dataplane.ModelReadyRequest, opts ...grpc.CallOption) (*dataplane.ModelReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ModelReady", varargs...)
	ret0, _ := ret[0].(*dataplane.ModelReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelReady indicates an expected call of ModelReady.
func (mr *MockGRPCInferenceServiceClientMockRecorder) ModelReady(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelReady", reflect.TypeOf((*MockGRPCInferenceServiceClient)(nil).ModelReady), varargs...)
}

// RepositoryIndex mocks base method.
func (m *MockGRPCInferenceServiceClient) RepositoryIndex(ctx context.Context, in *dataplane.RepositoryIndexRequest, opts ...grpc.CallOption) (*dataplane.RepositoryIndexResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RepositoryIndex", varargs...)
	ret0, _ := ret[0].(*dataplane.RepositoryIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryIndex indicates an expected call of RepositoryIndex.
func (mr *MockGRPCInferenceServiceClientMockRecorder) RepositoryIndex(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryIndex", reflect.TypeOf((*MockGRPCInferenceServiceClient)(nil).RepositoryIndex), varargs...)
}

// RepositoryModelLoad mocks base method.
func (m *MockGRPCInferenceServiceClient) RepositoryModelLoad(ctx context.Context, in *dataplane.RepositoryModelLoadRequest, opts ...grpc.CallOption) (*dataplane.RepositoryModelLoadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RepositoryModelLoad", varargs...)
	ret0, _ := ret[0].(*dataplane.RepositoryModelLoadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryModelLoad indicates an expected call of RepositoryModelLoad.
func (mr *MockGRPCInferenceServiceClientMockRecorder) RepositoryModelLoad(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryModelLoad", reflect.TypeOf((*MockGRPCInferenceServiceClient)(nil).RepositoryModelLoad), varargs...)
}

// RepositoryModelUnload mocks base method.
func (m *MockGRPCInferenceServiceClient) RepositoryModelUnload(ctx context.Context, in *dataplane.RepositoryModelUnloadRequest, opts ...grpc.CallOption) (*dataplane.RepositoryModelUnloadResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RepositoryModelUnload", varargs...)
	ret0, _ := ret[0].(*dataplane.RepositoryModelUnloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryModelUnload indicates an expected call of RepositoryModelUnload.
func (mr *MockGRPCInferenceServiceClientMockRecorder) RepositoryModelUnload(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryModelUnload", reflect.TypeOf((*MockGRPCInferenceServiceClient)(nil).RepositoryModelUnload), varargs...)
}

// ServerLive mocks base method.
func (m *MockGRPCInferenceServiceClient) ServerLive(ctx context.Context, in *dataplane.ServerLiveRequest, opts ...grpc.CallOption) (*dataplane.ServerLiveResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServerLive", varargs...)
	ret0, _ := ret[0].(*dataplane.ServerLiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerLive indicates an expected call of ServerLive.
func (mr *MockGRPCInferenceServiceClientMockRecorder) ServerLive(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerLive", reflect.TypeOf((*MockGRPCInferenceServiceClient)(nil).ServerLive), varargs...)
}

// ServerMetadata mocks base method.
func (m *MockGRPCInferenceServiceClient) ServerMetadata(ctx context.Context, in *dataplane.ServerMetadataRequest, opts ...grpc.CallOption) (*dataplane.ServerMetadataResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServerMetadata", varargs...)
	ret0, _ := ret[0].(*dataplane.ServerMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerMetadata indicates an expected call of ServerMetadata.
func (mr *MockGRPCInferenceServiceClientMockRecorder) ServerMetadata(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerMetadata", reflect.TypeOf((*MockGRPCInferenceServiceClient)(nil).ServerMetadata), varargs...)
}

// ServerReady mocks base method.
func (m *MockGRPCInferenceServiceClient) ServerReady(ctx context.Context, in *dataplane.ServerReadyRequest, opts ...grpc.CallOption) (*dataplane.ServerReadyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ServerReady", varargs...)
	ret0, _ := ret[0].(*dataplane.ServerReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerReady indicates an expected call of ServerReady.
func (mr *MockGRPCInferenceServiceClientMockRecorder) ServerReady(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerReady", reflect.TypeOf((*MockGRPCInferenceServiceClient)(nil).ServerReady), varargs...)
}

// MockGRPCInferenceServiceServer is a mock of GRPCInferenceServiceServer interface.
type MockGRPCInferenceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockGRPCInferenceServiceServerMockRecorder
}

// MockGRPCInferenceServiceServerMockRecorder is the mock recorder for MockGRPCInferenceServiceServer.
type MockGRPCInferenceServiceServerMockRecorder struct {
	mock *MockGRPCInferenceServiceServer
}

// NewMockGRPCInferenceServiceServer creates a new mock instance.
func NewMockGRPCInferenceServiceServer(ctrl *gomock.Controller) *MockGRPCInferenceServiceServer {
	mock := &MockGRPCInferenceServiceServer{ctrl: ctrl}
	mock.recorder = &MockGRPCInferenceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGRPCInferenceServiceServer) EXPECT() *MockGRPCInferenceServiceServerMockRecorder {
	return m.recorder
}

// ModelInfer mocks base method.
func (m *MockGRPCInferenceServiceServer) ModelInfer(arg0 context.Context, arg1 *dataplane.ModelInferRequest) (*dataplane.ModelInferResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelInfer", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.ModelInferResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelInfer indicates an expected call of ModelInfer.
func (mr *MockGRPCInferenceServiceServerMockRecorder) ModelInfer(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelInfer", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).ModelInfer), arg0, arg1)
}

// ModelMetadata mocks base method.
func (m *MockGRPCInferenceServiceServer) ModelMetadata(arg0 context.Context, arg1 *dataplane.ModelMetadataRequest) (*dataplane.ModelMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMetadata", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.ModelMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelMetadata indicates an expected call of ModelMetadata.
func (mr *MockGRPCInferenceServiceServerMockRecorder) ModelMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMetadata", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).ModelMetadata), arg0, arg1)
}

// ModelReady mocks base method.
func (m *MockGRPCInferenceServiceServer) ModelReady(arg0 context.Context, arg1 *dataplane.ModelReadyRequest) (*dataplane.ModelReadyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelReady", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.ModelReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelReady indicates an expected call of ModelReady.
func (mr *MockGRPCInferenceServiceServerMockRecorder) ModelReady(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelReady", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).ModelReady), arg0, arg1)
}

// RepositoryIndex mocks base method.
func (m *MockGRPCInferenceServiceServer) RepositoryIndex(arg0 context.Context, arg1 *dataplane.RepositoryIndexRequest) (*dataplane.RepositoryIndexResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryIndex", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.RepositoryIndexResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryIndex indicates an expected call of RepositoryIndex.
func (mr *MockGRPCInferenceServiceServerMockRecorder) RepositoryIndex(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryIndex", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).RepositoryIndex), arg0, arg1)
}

// RepositoryModelLoad mocks base method.
func (m *MockGRPCInferenceServiceServer) RepositoryModelLoad(arg0 context.Context, arg1 *dataplane.RepositoryModelLoadRequest) (*dataplane.RepositoryModelLoadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryModelLoad", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.RepositoryModelLoadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryModelLoad indicates an expected call of RepositoryModelLoad.
func (mr *MockGRPCInferenceServiceServerMockRecorder) RepositoryModelLoad(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryModelLoad", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).RepositoryModelLoad), arg0, arg1)
}

// RepositoryModelUnload mocks base method.
func (m *MockGRPCInferenceServiceServer) RepositoryModelUnload(arg0 context.Context, arg1 *dataplane.RepositoryModelUnloadRequest) (*dataplane.RepositoryModelUnloadResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RepositoryModelUnload", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.RepositoryModelUnloadResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RepositoryModelUnload indicates an expected call of RepositoryModelUnload.
func (mr *MockGRPCInferenceServiceServerMockRecorder) RepositoryModelUnload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RepositoryModelUnload", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).RepositoryModelUnload), arg0, arg1)
}

// ServerLive mocks base method.
func (m *MockGRPCInferenceServiceServer) ServerLive(arg0 context.Context, arg1 *dataplane.ServerLiveRequest) (*dataplane.ServerLiveResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerLive", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.ServerLiveResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerLive indicates an expected call of ServerLive.
func (mr *MockGRPCInferenceServiceServerMockRecorder) ServerLive(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerLive", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).ServerLive), arg0, arg1)
}

// ServerMetadata mocks base method.
func (m *MockGRPCInferenceServiceServer) ServerMetadata(arg0 context.Context, arg1 *dataplane.ServerMetadataRequest) (*dataplane.ServerMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerMetadata", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.ServerMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerMetadata indicates an expected call of ServerMetadata.
func (mr *MockGRPCInferenceServiceServerMockRecorder) ServerMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerMetadata", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).ServerMetadata), arg0, arg1)
}

// ServerReady mocks base method.
func (m *MockGRPCInferenceServiceServer) ServerReady(arg0 context.Context, arg1 *dataplane.ServerReadyRequest) (*dataplane.ServerReadyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerReady", arg0, arg1)
	ret0, _ := ret[0].(*dataplane.ServerReadyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServerReady indicates an expected call of ServerReady.
func (mr *MockGRPCInferenceServiceServerMockRecorder) ServerReady(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerReady", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).ServerReady), arg0, arg1)
}

// mustEmbedUnimplementedGRPCInferenceServiceServer mocks base method.
func (m *MockGRPCInferenceServiceServer) mustEmbedUnimplementedGRPCInferenceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGRPCInferenceServiceServer")
}

// mustEmbedUnimplementedGRPCInferenceServiceServer indicates an expected call of mustEmbedUnimplementedGRPCInferenceServiceServer.
func (mr *MockGRPCInferenceServiceServerMockRecorder) mustEmbedUnimplementedGRPCInferenceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGRPCInferenceServiceServer", reflect.TypeOf((*MockGRPCInferenceServiceServer)(nil).mustEmbedUnimplementedGRPCInferenceServiceServer))
}

// MockUnsafeGRPCInferenceServiceServer is a mock of UnsafeGRPCInferenceServiceServer interface.
type MockUnsafeGRPCInferenceServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeGRPCInferenceServiceServerMockRecorder
}

// MockUnsafeGRPCInferenceServiceServerMockRecorder is the mock recorder for MockUnsafeGRPCInferenceServiceServer.
type MockUnsafeGRPCInferenceServiceServerMockRecorder struct {
	mock *MockUnsafeGRPCInferenceServiceServer
}

// NewMockUnsafeGRPCInferenceServiceServer creates a new mock instance.
func NewMockUnsafeGRPCInferenceServiceServer(ctrl *gomock.Controller) *MockUnsafeGRPCInferenceServiceServer {
	mock := &MockUnsafeGRPCInferenceServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeGRPCInferenceServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeGRPCInferenceServiceServer) EXPECT() *MockUnsafeGRPCInferenceServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedGRPCInferenceServiceServer mocks base method.
func (m *MockUnsafeGRPCInferenceServiceServer) mustEmbedUnimplementedGRPCInferenceServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedGRPCInferenceServiceServer")
}

// mustEmbedUnimplementedGRPCInferenceServiceServer indicates an expected call of mustEmbedUnimplementedGRPCInferenceServiceServer.
func (mr *MockUnsafeGRPCInferenceServiceServerMockRecorder) mustEmbedUnimplementedGRPCInferenceServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedGRPCInferenceServiceServer", reflect.TypeOf((*MockUnsafeGRPCInferenceServiceServer)(nil).mustEmbedUnimplementedGRPCInferenceServiceServer))
}
